import os
import re

from aiohttp import ClientSession
from aiogram import Bot, Dispatcher, executor, types
from typing import Optional
import logging


logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.environ["TOKEN"], parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


def remove_punctuation(s: str) -> str:
    """Removes all punctuation in text excluding dashes and hyphens"""
    for sign in ",.!?<>@#$%^&*()_+=:;'\"/\\":
        s = s.replace(sign, "")
    return s


async def predict(text: str) -> Optional[dict]:
    async with ClientSession() as session:
        async with session.post(
                f"{os.environ['API_URL']}/detect_slang",
                json={
                    "text": text
                }
        ) as res:
            if res.status != 200:
                logging.error(f"Got API error while detecting slang. ({await res.text()})")
                return None
            data = await res.json()
    return data


async def get_term_definition(term: str) -> Optional[tuple[str, str]]:
    async with ClientSession() as session:
        async with session.get(f"{os.environ['API_URL']}/term/{term}") as res:
            if res.status not in {404, 200}:
                logging.error(f"Got API error while getting term definition. ({await res.text()})")
                return None
            data = await res.json()
            # print(data)
            return (data['result']['definition'], data['result']['key'])\
                if data['status'] == 'ok' else ("", "")


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â!</b> –Ø –Ω–∞–π–¥—É –±–∏—Ä–∂–µ–≤–æ–π —Å–ª–µ–Ω–≥ –≤ –ª—é–±–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ."
        " –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ üòè.\n"
        "<i>‚ÑπÔ∏è –ò–ª–∏ –∂–µ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ—Ä–º–∏–Ω –∏ —è –æ–±—ä—è—Å–Ω—é –µ–≥–æ</i>"
    )


@dp.message_handler()
async def echo(message: types.Message):
    await bot.send_chat_action(message.chat.id, "typing")
    text = re.split(r"\s", message.text.strip())
    definition, key = await get_term_definition(remove_punctuation(message.text.strip()))
    if definition:
        return (
            await message.answer(f"‚ÑπÔ∏è <b>{key}</b> ‚Äì {definition}")
            if definition
            else await message.answer("<b>üò¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
        )
    result = await predict(message.text)
    if not result['result']['slang']:
        return await message.answer("<b>üôÉ –°–ª–µ–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
    for item in result['result']['highlight']:
        ind, method = item.split("_")
        if ":" in ind:
            s_ind, f_ind = map(int, ind.split(":"))
            # print(text[s_ind:f_ind + 1], result['result']['highlight'][item])
            text[s_ind] = f"<code><b>{text[s_ind]}"
            text[f_ind] = f"{text[f_ind]}</b></code>"
        else:
            ind = int(ind)
            # print(text[ind], result['result']['highlight'][item])
            if method == 'ml':
                text[ind] = f"<b><u>{text[ind]}</u></b>"
            elif method == 'determined':
                text[ind] = f"<code><b>{text[ind]}</b></code>"
    await message.answer(
        f'{" ".join(text)}\n\n'
        f'<i>‚ÑπÔ∏è –ß—Ç–æ–± —É–∑–Ω–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞ –∫–ª–∏–∫–Ω–∏ –Ω–∞ —Ç–µ—Ä–º–∏–Ω '
        f'(–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π <code>—Ç–∞–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º</code>) –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ</i>'
    )


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
